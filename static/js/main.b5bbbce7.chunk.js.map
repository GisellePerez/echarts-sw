{"version":3,"sources":["constants/constants.ts","services/swapi/getFilms.ts","pages/Home.tsx","services/swapi/getFilm.ts","pages/Film.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","getFilms","Promise","resolve","reject","fetch","then","response","json","data","error","results","catch","Home","useState","loading","setLoading","films","setFilms","getFilmsData","a","filmsData","getFilmId","filmUrl","regex","RegExp","match","length","useEffect","map","film","to","url","title","option","xAxis","type","yAxis","series","getFilm","id","console","log","Film","useParams","setFilm","getFilmData","filmData","created","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5bbbce7.chunk.js","sourcesContent":["const BASE_URL = 'https://swapi.dev/api';\n\nexport { BASE_URL };\n","import { BASE_URL } from '../../constants/constants';\nimport FilmType from '../../types/film.types';\n\nconst getFilms = (): Promise<FilmType[]> => {\n  return new Promise((resolve, reject) => {\n    fetch(`${BASE_URL}/films`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data?.error) {\n          reject(data?.error);\n        } else {\n          resolve(data?.results);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default getFilms;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport getFilms from '../services/swapi/getFilms';\nimport Film from '../types/film.types';\nimport { Link } from 'react-router-dom';\n\nconst Home = (): ReactElement => {\n  // Initial states\n  const [loading, setLoading] = useState<boolean>(false);\n  const [films, setFilms] = useState<Film[]>([]);\n\n  // Get all films\n  const getFilmsData = async () => {\n    setLoading(true);\n\n    try {\n      const filmsData: Film[] = await getFilms();\n      setFilms(filmsData);\n      setLoading(false);\n    } catch (error) {\n      setFilms([]);\n      setLoading(false);\n    }\n  };\n\n  const getFilmId = (filmUrl: string): string => {\n    const regex = new RegExp(/(?<=films\\/)./, 'gi');\n    const match = filmUrl.match(regex);\n\n    return match && match.length ? match[0] : '';\n  };\n\n  useEffect(() => {\n    getFilmsData();\n  }, []);\n\n  return (\n    <div>\n      <h1>HOME</h1>\n\n      {loading && 'Loading...'}\n\n      {!loading && films && films.length ? (\n        <ul>\n          {films.map((film: Film) => (\n            <li key={film.title}>\n              <Link to={`films/${getFilmId(film.url)}`}>\n                <h2>{film.title}</h2>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n\n      <ReactEcharts\n        option={{\n          xAxis: {\n            type: 'category',\n            data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n          },\n          yAxis: {\n            type: 'value',\n          },\n          series: [\n            {\n              data: [820, 932, 901, 934, 1290, 1330, 1320],\n              type: 'line',\n            },\n          ],\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","import { BASE_URL } from '../../constants/constants';\nimport FilmType from '../../types/film.types';\n\nconst getFilm = (id: string): Promise<FilmType> => {\n  return new Promise((resolve, reject) => {\n    fetch(`${BASE_URL}/films/${id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data?.error) {\n          reject(data?.error);\n        } else {\n          console.log('film', data);\n          resolve(data);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default getFilm;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n// import Character from '../components/Character';\n\nimport getFilm from '../services/swapi/getFilm';\nimport FilmType from '../types/film.types';\n\nconst Film = (): ReactElement => {\n  // Get id in the url using useParams provided by react-router-dom\n  const { id } = useParams<{ id: string }>();\n\n  // Initial states\n  const [film, setFilm] = useState<FilmType | null>(null);\n\n  // Get film data by id\n  const getFilmData = async (id: string) => {\n    try {\n      const filmData: FilmType = await getFilm(id);\n      setFilm(filmData);\n    } catch (error) {\n      setFilm(null);\n    }\n  };\n\n  useEffect(() => {\n    getFilmData(id);\n  }, [id]);\n\n  useEffect(() => {});\n\n  return (\n    <div>\n      <h1>FILM</h1>\n      {film && (\n        <div>\n          <h2>{film.title}</h2>\n          <h3>{film.created}</h3>\n\n          {/* {film.characters && film.characters.length ? (\n            <ul>\n              {film.characters.map((character: string) => (\n                <li key={character}>\n                  <Character characterUrl={character} />\n                </li>\n              ))}\n            </ul>\n          ) : null} */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Film;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Film from './pages/Film';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Router>\n          <header>Header</header>\n\n          <Switch>\n            <Route exact path=\"/echarts-sw\" component={Home} />\n            <Route path=\"/echarts-sw/films/:id\" component={Film} />\n          </Switch>\n        </Router>\n\n        <footer>Footer</footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}