{"version":3,"sources":["constants/constants.ts","services/swapi/getFilms.ts","pages/Home.tsx","services/swapi/getFilm.ts","pages/Film.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","getFilms","Promise","resolve","reject","fetch","then","response","json","data","error","results","catch","Home","useState","loading","setLoading","films","setFilms","getFilmsData","a","filmsData","getFilmId","filmUrl","regex","RegExp","match","length","option","series","type","map","film","charactersLength","characters","name","title","value","useEffect","to","url","style","height","getFilm","id","Film","useParams","setFilm","getFilmData","filmData","filmDate","replace","formatDate","created","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e09bb83.chunk.js","sourcesContent":["const BASE_URL = 'https://swapi.dev/api';\n\nexport { BASE_URL };\n","import { BASE_URL } from '../../constants/constants';\nimport FilmType from '../../types/film.types';\n\nconst getFilms = (): Promise<FilmType[]> => {\n  return new Promise((resolve, reject) => {\n    fetch(`${BASE_URL}/films`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data?.error) {\n          reject(data?.error);\n        } else {\n          resolve(data?.results);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default getFilms;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport './Home.css';\n\nimport getFilms from '../services/swapi/getFilms';\nimport Film from '../types/film.types';\nimport { Link } from 'react-router-dom';\n\nconst Home = (): ReactElement => {\n  type FormattedFilmData = {\n    name: string;\n    value: number;\n  };\n\n  // Initial states\n  const [loading, setLoading] = useState<boolean>(false);\n  const [films, setFilms] = useState<Film[]>([]);\n\n  // Get all films\n  const getFilmsData = async () => {\n    setLoading(true);\n\n    try {\n      const filmsData: Film[] = await getFilms();\n      setFilms(filmsData);\n      setLoading(false);\n    } catch (error) {\n      setFilms([]);\n      setLoading(false);\n    }\n  };\n\n  const formatFilmsData = (): FormattedFilmData[] => {\n    const formattedFilmDataArray: FormattedFilmData[] =\n      films && films.length\n        ? films.map((film) => {\n            const charactersLength =\n              film.characters?.length && film.characters?.length;\n\n            return {\n              name: `${film.title} - Personajes: ${charactersLength}`,\n              value: charactersLength,\n            };\n          })\n        : [];\n\n    return formattedFilmDataArray;\n  };\n\n  const getFilmId = (filmUrl: string): string => {\n    const regex = new RegExp(/(?<=films\\/)./, 'gi');\n    const match = filmUrl.match(regex);\n\n    return match && match.length ? match[0] : '';\n  };\n\n  const option = {\n    series: [\n      {\n        type: 'treemap',\n        data: formatFilmsData(),\n      },\n    ],\n  };\n\n  useEffect(() => {\n    getFilmsData();\n  }, []);\n\n  return (\n    <main>\n      {loading && 'Loading...'}\n\n      {!loading && (\n        <>\n          <section>\n            <h2>Films list</h2>\n            {films && films.length ? (\n              <ul>\n                {films.map((film: Film) => (\n                  <li key={film.title}>\n                    <Link to={`echarts-sw/films/${getFilmId(film.url)}`}>\n                      <h4>\n                        {film.title}\n                        <span>&#8594;</span>\n                      </h4>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            ) : null}\n          </section>\n\n          <section>\n            <h2>Chart</h2>\n            <ReactEcharts style={{ height: 400 }} option={option} />\n          </section>\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n","import { BASE_URL } from '../../constants/constants';\nimport FilmType from '../../types/film.types';\n\nconst getFilm = (id: string): Promise<FilmType> => {\n  return new Promise((resolve, reject) => {\n    fetch(`${BASE_URL}/films/${id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data?.error) {\n          reject(data?.error);\n        } else {\n          resolve(data);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default getFilm;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './Film.css';\n\nimport getFilm from '../services/swapi/getFilm';\nimport FilmType from '../types/film.types';\n\nconst Film = (): ReactElement => {\n  // Get id in the url using useParams provided by react-router-dom\n  const { id } = useParams<{ id: string }>();\n\n  // Initial states\n  const [film, setFilm] = useState<FilmType | null>(null);\n\n  // Get film data by id\n  // TODO: maybe this call can be saved with context in the parent component\n  const getFilmData = async (id: string) => {\n    try {\n      const filmData: FilmType = await getFilm(id);\n      setFilm(filmData);\n    } catch (error) {\n      setFilm(null);\n    }\n  };\n\n  const formatDate = (filmDate: string): string => {\n    if (filmDate) {\n      const regex = new RegExp(/^(.*?)T/, 'gi');\n      const match = filmDate.match(regex);\n\n      return match && match.length ? match[0].replace('T', '') : '';\n    } else {\n      return '';\n    }\n  };\n\n  useEffect(() => {\n    getFilmData(id);\n  }, [id]);\n\n  return (\n    <main>\n      {film && (\n        <div>\n          <h2>{film.title}</h2>\n          <ul>\n            <li>\n              <h3>Created: {formatDate(film.created && film.created)}</h3>\n            </li>\n\n            <li>\n              <h3>Amount of characters: {film.characters?.length}</h3>\n            </li>\n          </ul>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Film;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './pages/Home';\nimport Film from './pages/Film';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Router>\n          <header>\n            <h1>Star Wars Movies</h1>\n          </header>\n\n          <Switch>\n            <Route exact path=\"/echarts-sw\" component={Home} />\n            <Route path=\"/echarts-sw/films/:id\" component={Film} />\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}