{"version":3,"sources":["pages/Home.tsx","constants/constants.ts","pages/Film.tsx","services/swapi/getFilms.ts","components/Footer.tsx","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","films","getFilmId","filmUrl","regex","RegExp","match","length","option","series","type","data","map","film","charactersLength","characters","name","title","value","label","color","fontSize","fontStyle","to","url","style","height","width","BASE_URL","Film","id","useParams","useState","setFilm","useEffect","filmId","filmsCopy","found","find","getFilmData","className","filmDate","replace","formatDate","created","episode_id","director","producer","getFilms","Promise","resolve","reject","fetch","then","response","json","error","results","catch","Footer","Header","App","loading","setLoading","setFilms","getFilmsData","a","filmsData","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8f75854.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport './Home.css';\n\nimport Film from '../types/film.types';\nimport { Link } from 'react-router-dom';\nimport FilmType from '../types/film.types';\n\ntype HomeProps = {\n  films: FilmType[];\n};\n\nconst Home = ({ films }: HomeProps): ReactElement => {\n  type FormattedFilmData = {\n    name: string;\n    value: number;\n  };\n\n  // This function formats the films data and returns the type of object the chart needs\n  const formatFilmsData = (): FormattedFilmData[] => {\n    const formattedFilmDataArray: FormattedFilmData[] =\n      films && films.length\n        ? films.map((film) => {\n            const charactersLength =\n              film.characters?.length && film.characters?.length;\n\n            return {\n              name: `${film.title} \nPersonajes: ${charactersLength}`,\n              value: charactersLength,\n            };\n          })\n        : [];\n\n    return formattedFilmDataArray;\n  };\n\n  // This function gets the film id from the url to create the routes to every movie\n  const getFilmId = (filmUrl: string): string => {\n    const regex = new RegExp(/(?<=films\\/)./, 'gi');\n    const match = filmUrl.match(regex);\n\n    return match && match.length ? match[0] : '';\n  };\n\n  const option = {\n    series: [\n      {\n        type: 'treemap',\n        data: formatFilmsData(),\n        label: {\n          color: '#333',\n          fontSize: 14,\n          fontStyle: 'bold',\n        },\n      },\n    ],\n  };\n\n  return (\n    <main>\n      <section>\n        <h2>Films list</h2>\n        {films && films.length ? (\n          <ul>\n            {films.map((film: Film) => (\n              <li key={film.title}>\n                <Link to={`/echarts-sw/films/${getFilmId(film.url)}`}>\n                  <h4>\n                    {film.title}\n                    <span>&#8594;</span>\n                  </h4>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        ) : null}\n      </section>\n\n      <section>\n        <h2>Chart</h2>\n        <ReactEcharts\n          style={{ height: '70vh', width: '100%' }}\n          option={option}\n        />\n      </section>\n    </main>\n  );\n};\n\nexport default Home;\n","const BASE_URL = 'https://swapi.dev/api';\n\nexport { BASE_URL };\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport './Film.css';\n\nimport FilmType from '../types/film.types';\nimport { BASE_URL } from '../constants/constants';\n\ntype FilmProps = {\n  films: FilmType[];\n};\n\nconst Film = ({ films }: FilmProps): ReactElement => {\n  // Get id in the url using useParams provided by react-router-dom\n  const { id } = useParams<{ id: string }>();\n\n  // Initial state\n  const [film, setFilm] = useState<FilmType | null>(null);\n\n  // Get film data by id. This function gets the current movie data by comparing the url from the api and the id used in the url params\n  const getFilmData = (filmId: string) => {\n    const filmsCopy: FilmType[] = films?.length ? [...films] : [];\n\n    const found =\n      filmsCopy && filmsCopy.length\n        ? filmsCopy.find(\n            (film: FilmType) => film.url === `${BASE_URL}/films/${filmId}/`\n          )\n        : null;\n\n    found && setFilm(found);\n  };\n\n  const formatDate = (filmDate: string): string => {\n    if (filmDate) {\n      const regex = new RegExp(/^(.*?)T/, 'gi');\n      const match = filmDate.match(regex);\n\n      return match && match.length ? match[0].replace('T', '') : '';\n    } else {\n      return '';\n    }\n  };\n\n  useEffect(() => {\n    getFilmData(id);\n  }, [id]);\n\n  return (\n    <main className=\"film-content\">\n      {film && (\n        <div>\n          <div className=\"title-wrapper\">\n            <Link to=\"/echarts-sw\" className=\"back-link\">\n              <span title=\"Volver\" aria-label=\"Volver\">\n                &#8592;\n              </span>\n\n              <h2>{film.title}</h2>\n            </Link>\n          </div>\n\n          <ul>\n            <li>\n              <h3>Created: {formatDate(film.created && film.created)}</h3>\n            </li>\n\n            <li>\n              <h3>Amount of characters: {film.characters?.length}</h3>\n            </li>\n\n            <li>\n              <h3>Episode: {film.episode_id}</h3>\n            </li>\n\n            <li>\n              <h3>Directed by: {film.director}</h3>\n            </li>\n\n            <li>\n              <h3>Produced by: {film.producer}</h3>\n            </li>\n          </ul>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Film;\n","import { BASE_URL } from '../../constants/constants';\nimport FilmType from '../../types/film.types';\n\nconst getFilms = (): Promise<FilmType[]> => {\n  return new Promise((resolve, reject) => {\n    fetch(`${BASE_URL}/films`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data?.error) {\n          reject(data?.error);\n        } else {\n          resolve(data?.results);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default getFilms;\n","import React, { ReactElement } from 'react';\n\nconst Footer = (): ReactElement => {\n  return (\n    <footer>\n      <p>Made with ❤️</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { ReactElement } from 'react';\n\nconst Header = (): ReactElement => {\n  return (\n    <header>\n      <h1>Star Wars Movies</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './pages/Home';\nimport Film from './pages/Film';\n\nimport FilmType from './types/film.types';\nimport getFilms from './services/swapi/getFilms';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nfunction App() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [films, setFilms] = useState<FilmType[]>([]);\n\n  // Get all films from the api\n  const getFilmsData = async () => {\n    setLoading(true);\n\n    try {\n      const filmsData: FilmType[] = await getFilms();\n      setFilms(filmsData);\n      setLoading(false);\n    } catch (error) {\n      setFilms([]);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getFilmsData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Router>\n          <Header />\n\n          {loading && (\n            <div className=\"spinner-wrapper\">\n              <div className=\"spinner\"></div>\n            </div>\n          )}\n\n          {!loading ? (\n            <>\n              <Switch>\n                <Route exact path=\"/echarts-sw\">\n                  <Home films={films} />\n                </Route>\n                <Route path=\"/echarts-sw/films/:id\">\n                  <Film films={films} />\n                </Route>\n              </Switch>\n\n              <Footer />\n            </>\n          ) : null}\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}