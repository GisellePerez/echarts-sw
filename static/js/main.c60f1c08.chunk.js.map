{"version":3,"sources":["services/swapi/getFilms.ts","constants/constants.ts","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getFilms","Promise","resolve","reject","fetch","then","response","json","data","error","results","catch","Home","useState","loading","setLoading","films","setFilms","getFilmsData","a","filmsData","useEffect","length","map","film","title","option","xAxis","type","yAxis","series","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAoBeA,EAjBE,WACf,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,MAAM,GAAD,OCLQ,wBDKR,WACFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,IACL,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMC,OACRN,EAAM,OAACK,QAAD,IAACA,OAAD,EAACA,EAAMC,OAEbP,EAAO,OAACM,QAAD,IAACA,OAAD,EAACA,EAAME,YAGjBC,OAAM,SAACF,GACNN,EAAOM,U,OE2CAG,EApDF,WACX,MAA8BC,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAiB,IAA3C,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAY,uCAAG,4BAAAC,EAAA,6DACnBJ,GAAW,GADQ,kBAIef,IAJf,OAIXoB,EAJW,OAKjBH,EAASG,GACTL,GAAW,GANM,gDAQjBE,EAAS,IACTF,GAAW,GATM,yDAAH,qDAiBlB,OAJAM,qBAAU,WACRH,MACC,IAGD,gCACE,qCAECJ,GAAW,cAEVA,GAAWE,GAASA,EAAMM,OACxBN,EAAMO,KAAI,SAACC,GAAD,OAAgB,4BAAIA,EAAKC,WACnC,KAEJ,cAAC,IAAD,CACEC,OAAQ,CACNC,MAAO,CACLC,KAAM,WACNpB,KAAM,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAEnDqB,MAAO,CACLD,KAAM,SAERE,OAAQ,CACN,CACEtB,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,MACvCoB,KAAM,gBC9BLG,MAdf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,8BACE,eAAC,IAAD,WACE,4CAEA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWvB,YCEtCwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c60f1c08.chunk.js","sourcesContent":["import { BASE_URL } from '../../constants/constants';\nimport Film from '../../types/film.types';\n\nconst getFilms = (): Promise<Film[]> => {\n  return new Promise((resolve, reject) => {\n    fetch(`${BASE_URL}/films`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data?.error) {\n          reject(data?.error);\n        } else {\n          resolve(data?.results);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default getFilms;\n","const BASE_URL = 'https://swapi.dev/api';\n\nexport { BASE_URL };\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport getFilms from '../services/swapi/getFilms';\nimport Film from '../types/film.types';\n\nconst Home = (): ReactElement => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [films, setFilms] = useState<Film[]>([]);\n\n  const getFilmsData = async () => {\n    setLoading(true);\n\n    try {\n      const filmsData: Film[] = await getFilms();\n      setFilms(filmsData);\n      setLoading(false);\n    } catch (error) {\n      setFilms([]);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getFilmsData();\n  }, []);\n\n  return (\n    <div>\n      <p>HOME</p>\n\n      {loading && 'Loading...'}\n\n      {!loading && films && films.length\n        ? films.map((film: Film) => <p>{film.title}</p>)\n        : null}\n\n      <ReactEcharts\n        option={{\n          xAxis: {\n            type: 'category',\n            data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n          },\n          yAxis: {\n            type: 'value',\n          },\n          series: [\n            {\n              data: [820, 932, 901, 934, 1290, 1330, 1320],\n              type: 'line',\n            },\n          ],\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Router>\n          <header>Header</header>\n\n          <Route exact path=\"/echarts-sw\" component={Home} />\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}