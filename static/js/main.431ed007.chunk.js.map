{"version":3,"sources":["pages/Home.tsx","constants/constants.ts","pages/Film.tsx","services/swapi/getFilms.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","films","loading","getFilmId","filmUrl","regex","RegExp","match","length","option","series","type","data","map","film","charactersLength","characters","name","title","value","to","url","style","height","BASE_URL","Film","id","useParams","useState","setFilm","useEffect","filmId","filmsCopy","found","find","getFilmData","filmDate","replace","formatDate","created","getFilms","Promise","resolve","reject","fetch","then","response","json","error","results","catch","App","setLoading","setFilms","getFilmsData","a","filmsData","className","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.431ed007.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport './Home.css';\n\nimport Film from '../types/film.types';\nimport { Link } from 'react-router-dom';\nimport FilmType from '../types/film.types';\n\ntype HomeProps = {\n  films: FilmType[];\n  loading: boolean;\n};\n\nconst Home = ({ films, loading }: HomeProps): ReactElement => {\n  type FormattedFilmData = {\n    name: string;\n    value: number;\n  };\n\n  // This function formats the films data and returns the type of object the chart needs\n  const formatFilmsData = (): FormattedFilmData[] => {\n    const formattedFilmDataArray: FormattedFilmData[] =\n      films && films.length\n        ? films.map((film) => {\n            const charactersLength =\n              film.characters?.length && film.characters?.length;\n\n            return {\n              name: `${film.title} - Personajes: ${charactersLength}`,\n              value: charactersLength,\n            };\n          })\n        : [];\n\n    return formattedFilmDataArray;\n  };\n\n  // This function gets the film id from the url to create the routes to every movie\n  const getFilmId = (filmUrl: string): string => {\n    const regex = new RegExp(/(?<=films\\/)./, 'gi');\n    const match = filmUrl.match(regex);\n\n    return match && match.length ? match[0] : '';\n  };\n\n  const option = {\n    series: [\n      {\n        type: 'treemap',\n        data: formatFilmsData(),\n      },\n    ],\n  };\n\n  return (\n    <main>\n      {loading && 'Loading...'}\n\n      {!loading && (\n        <>\n          <section>\n            <h2>Films list</h2>\n            {films && films.length ? (\n              <ul>\n                {films.map((film: Film) => (\n                  <li key={film.title}>\n                    <Link to={`/echarts-sw/films/${getFilmId(film.url)}`}>\n                      <h4>\n                        {film.title}\n                        <span>&#8594;</span>\n                      </h4>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            ) : null}\n          </section>\n\n          <section>\n            <h2>Chart</h2>\n            <ReactEcharts style={{ height: 400 }} option={option} />\n          </section>\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n","const BASE_URL = 'https://swapi.dev/api';\n\nexport { BASE_URL };\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './Film.css';\n\nimport FilmType from '../types/film.types';\nimport { BASE_URL } from '../constants/constants';\n\ntype FilmProps = {\n  films: FilmType[];\n  loading: boolean;\n};\n\nconst Film = ({ films, loading }: FilmProps): ReactElement => {\n  // Get id in the url using useParams provided by react-router-dom\n  const { id } = useParams<{ id: string }>();\n\n  // Initial state\n  const [film, setFilm] = useState<FilmType | null>(null);\n\n  // Get film data by id. This function gets the current movie data by comparing the url from the api and the id used in the url params\n  const getFilmData = (filmId: string) => {\n    const filmsCopy: FilmType[] = films?.length ? [...films] : [];\n\n    const found =\n      filmsCopy && filmsCopy.length\n        ? filmsCopy.find(\n            (film: FilmType) => film.url === `${BASE_URL}/films/${filmId}/`\n          )\n        : null;\n\n    found && setFilm(found);\n  };\n\n  const formatDate = (filmDate: string): string => {\n    if (filmDate) {\n      const regex = new RegExp(/^(.*?)T/, 'gi');\n      const match = filmDate.match(regex);\n\n      return match && match.length ? match[0].replace('T', '') : '';\n    } else {\n      return '';\n    }\n  };\n\n  useEffect(() => {\n    getFilmData(id);\n  }, [id]);\n\n  return (\n    <main>\n      {film && (\n        <div>\n          <h2>{film.title}</h2>\n          <ul>\n            <li>\n              <h3>Created: {formatDate(film.created && film.created)}</h3>\n            </li>\n\n            <li>\n              <h3>Amount of characters: {film.characters?.length}</h3>\n            </li>\n          </ul>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Film;\n","import { BASE_URL } from '../../constants/constants';\nimport FilmType from '../../types/film.types';\n\nconst getFilms = (): Promise<FilmType[]> => {\n  return new Promise((resolve, reject) => {\n    fetch(`${BASE_URL}/films`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data?.error) {\n          reject(data?.error);\n        } else {\n          resolve(data?.results);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default getFilms;\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './pages/Home';\nimport Film from './pages/Film';\n\nimport FilmType from './types/film.types';\nimport getFilms from './services/swapi/getFilms';\n\nfunction App() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [films, setFilms] = useState<FilmType[]>([]);\n\n  // Get all films from the api\n  const getFilmsData = async () => {\n    setLoading(true);\n\n    try {\n      const filmsData: FilmType[] = await getFilms();\n      setFilms(filmsData);\n      setLoading(false);\n    } catch (error) {\n      setFilms([]);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getFilmsData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Router>\n          <header>\n            <h1>Star Wars Movies</h1>\n          </header>\n\n          {loading && 'loading...'}\n\n          {!loading ? (\n            <Switch>\n              <Route exact path=\"/echarts-sw\">\n                <Home films={films} loading={loading} />\n              </Route>\n              <Route path=\"/echarts-sw/films/:id\">\n                <Film films={films} loading={loading} />\n              </Route>\n            </Switch>\n          ) : null}\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}